# =============================================================================
# .github/workflows/ci.yml — Pipeline GitHub Actions
# Repository: memoire-gcp-terraform
# Purpose   : fmt/validate/plan(+upload)/apply(main) + Prowler + artefacts
# Author    : RD
# Date      : 2025-10-01
#
# Notes importantes
# - Prowler ne s’exécute que si le plan Terraform a des changements.
# - Les rapports (Checkov/TF plan/Prowler) sont déposés dans `reports/`
#   puis uploadés en artefacts si présents.
# - La clé du SA CI est fournie via secret `GCP_SA_KEY`.
# =============================================================================

name: CI - Terraform + Checks

on:
  push:
    branches: [ "main" ]
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  ci:
    runs-on: ubuntu-latest
    env:
      # Projet GCP à déployer / scanner
      GOOGLE_CLOUD_PROJECT: direct-byte-472309-n3

    steps:
      # 1) Code
      - name: Checkout
        uses: actions/checkout@v4

      # 2) Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.5

      # 3) gcloud CLI
      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2

      # 4) Écrit la clé SA dans un fichier
      - name: Write SA key to file
        id: write_key
        shell: bash
        run: |
          KEY="$RUNNER_TEMP/sa.json"
          # important: pas d'échappement -> on écrit la clé telle quelle
          printf '%s' '${{ secrets.GCP_SA_KEY }}' > "${KEY}"
          echo "key=${KEY}" >> "$GITHUB_OUTPUT"

      # 5) Active le service account
      - name: Activate service account & set project
        shell: bash
        run: |
          gcloud auth activate-service-account --key-file='${{ steps.write_key.outputs.key }}'
          gcloud config set project '${{ env.GOOGLE_CLOUD_PROJECT }}'
          gcloud auth list
          gcloud config get-value project

      # 6) Dossier de rapports
      - name: Create reports folder
        run: mkdir -p reports

      # 7) Terraform pipeline
      - name: Terraform init
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ steps.write_key.outputs.key }}
        run: terraform init -input=false

      - name: Terraform validate
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ steps.write_key.outputs.key }}
        run: terraform validate

      - name: Terraform plan
        id: plan
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ steps.write_key.outputs.key }}
        run: |
          set -o pipefail
          terraform plan -out=tfplan | tee plan.txt

      - name: Upload TF plan (PRs only)
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: tf-plan
          path: plan.txt

      - name: Terraform apply (main only)
        if: github.ref == 'refs/heads/main'
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ steps.write_key.outputs.key }}
        run: terraform apply -auto-approve tfplan

      # 8) Prowler — toujours exécuté
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Prowler
        run: pip install 'prowler~=3.11'

      - name: Run Prowler (always, same auth as local)
        continue-on-error: true
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ steps.write_key.outputs.key }}
          GOOGLE_CLOUD_PROJECT: ${{ env.GOOGLE_CLOUD_PROJECT }}
          CLOUDSDK_CORE_PROJECT: ${{ env.GOOGLE_CLOUD_PROJECT }}
        run: |
          echo "ADC file: $GOOGLE_APPLICATION_CREDENTIALS"
          echo "Project:  $GOOGLE_CLOUD_PROJECT"
          # même commande que sur ta machine
          prowler gcp --project-ids "$GOOGLE_CLOUD_PROJECT" -M html json -o reports/

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: reports/*
